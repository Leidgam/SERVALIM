<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnBuscar.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>